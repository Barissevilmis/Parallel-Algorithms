#include <iostream>
#include <fstream>
#include <sstream>
#include <omp.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <immintrin.h>
#include <cassert>
using namespace std;


void usage()
{
  cout << "USAGE: ./exec <filename> <device>" << endl;
  exit(0);
}

inline cudaError_t checkCuda(cudaError_t result) {
  if (result != cudaSuccess) {
    fprintf(stderr, "CUDA Runtime Error: %s\n", cudaGetErrorString(result));
    assert(result == cudaSuccess);
  }
  return result;
}

__global__
void PermanentCalculator(long long int K, double* xCuda, double* pCuda, int* my_MCuda, unsigned long long int CHUNK, long long int N)
{

  long long int index = ((blockDim.x * blockIdx.x + threadIdx.x) * CHUNK);

  if(index < K)
    {
      long long int ind = ((threadIdx.x) * N);
      
      extern __shared__ double x[];
      double* temp_xCuda = x;
      double* my_xCuda = temp_xCuda + ind;

      for(int i = 0; i < N; i++)
	my_xCuda[i] = xCuda[i];
      
      __syncthreads();
        
      long long int yy = index ^ (index >> 1LL);
      long long int START = index + 1;
      long long int END = index + CHUNK + 1;
      long long int ii;
      long long int y, y_prev;
      long long int FFS, z, m, n, jj;
      double pSelf = 0.0;
      double s, prodSign;
  
      long long int temp_y = yy;

      long long int BPC = __popcll(yy);
      for(n = 0; n < BPC; n++)
	{
	  FFS = __ffsll(temp_y) - 1;
	  temp_y &= ~(1LL << FFS);
	  for(m = 0; m < N; m++)
	    {
	      my_xCuda[m] += my_MCuda[m + (FFS*N)];
	    }
	}
      prodSign = ((index + 1) & 1LL) ? -1.0 : 1.0;
      for(ii = START; (ii < END) && (ii < K); ii++)
	{
	  y = (ii ^ (ii >> 1LL));
	  y_prev = (ii - 1) ^ ((ii - 1) >> 1LL);
	  z = __ffsll(y ^ y_prev) - 1;      
	  s = ((y >> z) & 1LL) ? 1.0 : -1.0;
	  double temp = 1.0;
#pragma unroll
	  for(jj = 0; jj < N; jj++)
	    {
	      my_xCuda[jj] += (s * my_MCuda[jj + (z * N)]); 
	      temp *= my_xCuda[jj];
	    }
	  pSelf += (prodSign * temp);
	  prodSign *= -1.0;
	}
      atomicAdd(pCuda, pSelf);
    }
}


int main(int argc, const char** argv)
{

  if(argc != 3)
    usage();

  string line;

  const char* filename = argv[1];
  ifstream input (filename);
  if(input.fail())
    return 0;

  int cudaDevice = atoi(argv[2]);
  cudaSetDevice(cudaDevice);

  cudaDeviceProp prop;
  cudaGetDeviceProperties(&prop, cudaDevice);
  
  long long int N;
  int Nsqr;
  int **M;
  int *Mrow;
  int *MCuda;
  getline(input,line);
  N = atoi(line.c_str());
  Nsqr = N*N;
  checkCuda(cudaMalloc((void**)&MCuda, sizeof(int)*Nsqr));

  
  Mrow = (int*)(malloc(sizeof(int)*Nsqr));
  M = (int**)(malloc(sizeof(int*)*N));
  for(int i = 0; i < N; i ++)
    {
      M[i] = (int*)(malloc(sizeof(int)*N));
    }

  int linectr = 0;
  while(getline(input,line))
    {
      stringstream ss(line);
      int temp;
      int ctr = 0;
      while(ss >> temp)
	{
	  M[linectr][ctr++] = temp;
	}
      linectr++;
    }
  //TRANSPOSE TO ONE DIM VECTOR
  int trctr = 0;
  for(int i = 0; i < N; i++)
    for(int j = 0; j < N; j++)
      Mrow[trctr++] = M[j][i];
	 
  size_t TOTAL_SHARED = prop.sharedMemPerBlock;

  checkCuda(cudaMemcpy(MCuda, Mrow, sizeof(int)*Nsqr, cudaMemcpyHostToDevice));
  
  double start, end, initt;
  long long int K;
  K = 1LL << (N-1);
  double result = 0;
  
  double *p = (double*)(malloc(sizeof(double)));
  *p = 1.0;

  // unsigned long long int CHUNK = K / TOTAL;

  double *x = (double*)(malloc(sizeof(double)*N));
  double *sumCol = (double*)(malloc(sizeof(double)*N)); 
  double *lastCol = (double*)(malloc(sizeof(double)*N));
  memset(sumCol, 0, sizeof(double)*N);
  memset(lastCol, 0, sizeof(double)*N);

  //Consider using xx as shared too: For Now xCuda and M are in shared because of large number of access
  //size_t xBlockMem = (SHARED - (Nsqr * sizeof(int)))/N;
  

  //long long int GRID = 1024;
  //long long int BLOCK = 32;
  long long int GRID = 1024*64;
  long long int BLOCK = 128;
  long long int TOTAL = BLOCK * GRID;
  
  long long int CHUNK = (K + (TOTAL-1)) / TOTAL;
  size_t SHARED = (BLOCK * N * sizeof(double));
  //printf("%d out of %d shared memory allocated for each block.\n", (int) SHARED, (int) TOTAL_SHARED);
  
  double *pCuda;  
  double *xCuda;
  cudaMalloc((void**)&pCuda, sizeof(double));
  cudaMalloc((void**)&xCuda, sizeof(double)*N);
  
  //BEGINNING
  initt = omp_get_wtime();

  for(int i = 0; i< N; i++)
    {
      lastCol[i] = M[i][N-1];
      for(int j = 0; j <N; j++)
	sumCol[i] += M[i][j];
      x[i] = (lastCol[i] - sumCol[i]/2);
      (*p) *= x[i];
    }
  //COPY X INTO GPU
  
  cudaMemcpy(xCuda, x, sizeof(double)*N, cudaMemcpyHostToDevice);
  cudaMemcpy(pCuda, p, sizeof(double), cudaMemcpyHostToDevice);
  //printf("Device Variable Copying:\t%s\n", cudaGetErrorString(cudaGetLastError()));
  
  start = omp_get_wtime();
  PermanentCalculator<<<GRID, BLOCK, SHARED>>>(K, xCuda, pCuda, MCuda, CHUNK, N);
  cudaDeviceSynchronize();
  cudaMemcpy(p, pCuda, sizeof(double), cudaMemcpyDeviceToHost);
  //printf("Device Variable Copying:\t%s\n", cudaGetErrorString(cudaGetLastError()));
  result = (4 * (N & 1) - 2) * (*p);
  
  //ENDING
  end = omp_get_wtime();
  
  cout << "Threads:" << TOTAL << "\tResult:" << result << "\tTime:" << end - start << "s" << "\tTotal Time:"<< end - initt << endl;
  //cout << TOTAL << "," << result << "," << end - initt << "\n";
  
  for(int i = 0; i < N; i++)
    free(M[i]);

  free(p);
  free(x);
  free(sumCol);
  free(lastCol);
  cudaFree(xCuda);
  cudaFree(pCuda);
  cudaFree(MCuda);
  free(M);
  free(Mrow);
  
  return 0;
}

      
